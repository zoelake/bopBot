import Head from 'next/head'
import Image from 'next/image'
import MyButton from '../../comps/Button'
import NavBar from '../../comps/Nav'
import MyTrack from '../../comps/TrackInfo'

import Playlist from '../../comps/Playlist'
import SbButton from '../../comps/SbButton'
import Toggle from '../../comps/Toggle'
import MyText from '../../comps/Text'
import { themes } from '../../utils/variables'
import { useTheme, useTitle, useHeader, usePar, useId } from '../../utils/provider'
import styled from 'styled-components';
import { device } from '../../styles/mediaSizes'
import MySwitch from '../../comps/Switch'
import Slider from '../../comps/Slider'
import UserInfo from '../../comps/UserInfo'
import { useState } from 'react'
import axios from 'axios'
import { useRouter } from 'next/router'



const Page = styled.div`
  display:flex;
  flex-direction: column;
  margin:0;
  justify-content: center;
  width: 100vw;
  position: absolute;
  height:95vh;
  bottom:0;
`;

const Dashboard = styled.div`
    background-color: ${props => props.bg};
    height:45vh;
    padding:30px 10px 10px 60px;
    /* border: 2px solid blue; */
    

    @media ${device.mobile}{

    }

    @media ${device.tablet}{
    }

    @media ${device.desktop}{
       
    }
`;
const SbCont = styled.div`
  display: flex;
  /* justify-content: space-between; */
  align-items: center;
  padding-left: 30px;
  white-space: nowrap;
  overflow-x: scroll;
  overflow-y: hidden;
  height:230px;
  padding-left: 30px;
  position: relative;
  top:-20px;
`;
const SliderCont = styled.div`
  display: flex;
  flex-wrap: wrap;
  width: 750px;
  justify-content: space-evenly;
  padding-left: 30px;
`;

const SpaceCont = styled.div`
display: flex;
width: 90%;
padding-left: 5px;

justify-content: space-between;
`;

const TracksCont = styled.div`
    height:40%;
    /* border:2px solid red; */
    /* position: absolute; */
    /* bottom:0;
    left:10px; */
    align-self: center;
    width:80%;
`;

const RegCont = styled.div`
  padding-left: 30px;
`;

const Divider = styled.div`
    background-color: ${props => props.color};
    width:90%;
    height:1px;
`;


export default function User() {

    //this will be replaced with data from db

    const { theme } = useTheme();
    const [selected, setSelected] = useState(null);
    const { titleSize } = useTitle();
    const { headerSize } = useHeader();
    const { parSize } = usePar();

    const [addedRecent, setAddedRecent] = useState(true)

    const [newPlaylistName, setNewPlaylistName] = useState(null);

    function HandleNewPlaylistName(value) {
        setNewPlaylistName(value)
    }

    function CreateNewPlaylist() {
        const newPlaylist = {
            name: newPlaylistName,
        }
        axios.post('http://localhost:3001/update-userName')
    }

    //not saving very well 
    const { id, setId } = useId();

    const router = useRouter();

    if (typeof window !== 'undefined') {
        if (localStorage.getItem('id')) {
            setId(localStorage.getItem('id'))
        }
    }

    if (router.isReady) {
        console.log('router is ready')
        const activeUser = router.asPath;
        console.log(id)
        console.log(activeUser)
        if (`/user/${id}` !== activeUser) {
            return <p>nothing</p>
        }
    }


    return (
        <>
            <Head>
                <title>botBot</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="#" />
            </Head>
            <NavBar />
            <Page>
                <input placeholder='new playlist name...' onChange={(e) => HandleNewPlaylistName(e.target.value)}></input>
                <button onClick={CreateNewPlaylist}>add new playlist</button>
                <Dashboard
                    bg={themes[theme].contrast}>

                    {/* <UserInfo /> */}
                    <MyText
                        weight={500}
                        lineHeight='0'
                        text={`Your playlists`}
                        size={`${titleSize}px`}
                    />

                    <SbCont>
                        {/* map this out: */}
                        <Playlist
                            cover='/playlistLiked.png'
                            onClick={() => setSelected('liked')}
                            bg={selected === 'liked' || null ? themes[theme].accent : themes[theme].playBg}
                            color={selected === 'liked' || themes[theme].white ? themes[theme].text : themes[theme].accent}
                            text='liked'
                        />
                        <Playlist
                            cover='/playlistRap.png'
                            onClick={() => setSelected('rap')}
                            bg={selected === 'rap' ? themes[theme].accent : themes[theme].playBg}
                            color={selected === 'rap' ? themes[theme].white : themes[theme].accent}
                            text='rap'
                        />
                        <Playlist
                            cover='/playlistPop.png'
                            onClick={() => setSelected('pop')}
                            bg={selected === 'pop' ? themes[theme].accent : themes[theme].playBg}
                            color={selected === 'pop' ? themes[theme].white : themes[theme].accent}
                            text='pop'
                        />
                        <Playlist
                            cover='/playlistIndie.png'
                            onClick={() => setSelected('indie')}
                            bg={selected === 'indie' ? themes[theme].accent : themes[theme].playBg}
                            color={selected === 'indie' ? themes[theme].white : themes[theme].accent}
                            text='indie'
                        />

                    </SbCont>
                </Dashboard>
                <TracksCont>
                    <SpaceCont>
                        <MyText
                            text={selected === null ? 'liked' : selected}
                            size={`${headerSize}px`}
                        />
                        <MyButton
                            onClick={() => setAddedRecent(!addedRecent)}
                            text={addedRecent ? 'See oldest ' : 'See newest'}
                        />

                    </SpaceCont>

                    <Divider
                        color={themes[theme].text} />
                    <br></br>

                    <RegCont>
                        <MyTrack />
                        <MyTrack />
                        <MyTrack />
                    </RegCont>

                </TracksCont>

            </Page>
        </>
    )
}
