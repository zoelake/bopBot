import Head from 'next/head'
import Image from 'next/image'
import MyButton from '../comps/Button'
import NavBar from '../comps/Nav'
import MyTrack from '../comps/TrackInfo'

import Playlist from '../comps/Playlist'
import SbButton from '../comps/SbButton'
import Toggle from '../comps/Toggle'
import MyText from '../comps/Text'
import { themes } from '../utils/variables'
import { useTheme, useTitle, useHeader, usePar } from "../utils/provider";
import styled from 'styled-components';
import { device } from '../styles/mediaSizes'
import MySwitch from '../comps/Switch'
import Slider from '../comps/Slider'
import { useEffect, useRef, useState } from 'react'
import axios from 'axios'

const Page = styled.div`
  display:flex;
  flex-direction: row;
  margin:0;
  justify-content: space-between;
`;

const Dashboard = styled.div`
    background-color: ${props => props.bg};
    height:100vh;
    width:100%;
    padding:10px 10px 10px 60px;


    @media ${device.mobile}{

    }

    @media ${device.tablet}{
    }

    @media ${device.desktop}{
       
    }
`;

const SbCont = styled.div`
  display: flex;
  flex-wrap: wrap;
  width: 630px;
  height:180px;
  justify-content: space-evenly;
  padding-left: 30px;
`;
const SliderCont = styled.div`
  display: flex;
  flex-wrap: wrap;
  width: 750px;
  justify-content: space-evenly;
  padding-left: 30px;
`;
const SpaceCont = styled.div`
display: flex;
width: 90%;
padding-left: 5px;

justify-content: space-between;
`;
const RegCont = styled.div`
  padding-left: 30px;
  overflow-y: scroll;
  height:175px;
  padding:10px;
  position: relative;
  width:80%;

`;

const Divider = styled.div`
    background-color: ${props => props.color};
    width:90%;
    height:1px;
`;

var timer = null;

export default function Home() {

  //theme states
  const { theme } = useTheme();
  const { titleSize } = useTitle();
  const { headerSize } = useHeader();
  const { parSize } = usePar();

  //genre genre
  const [genre, setGenre] = useState(null)



  //slider values
  const [acValue, setAcValue] = useState(null);
  const [dncValue, setDncValue] = useState(null);
  const [enValue, setEnValue] = useState(null);
  const [instValue, setInstValue] = useState(null);
  const [ldValue, setLdValue] = useState(null);
  const [tpValue, setTpValue] = useState(null);



  // useEffect(() => {
  //   inputFilter();
  // }, [genre, 
  //   // acValue, dncValue, enValue, instValue, ldValue, tpValue
  // ])


  const [tracks, setTracks] = useState([]);
  const [load, setLoad] = useState(false);

  const inputFilter = async () => {
    console.log('input generated!')
    if (timer === null) {
      timer = setTimeout(async () => {
        const params = {};
        if (genre !== null) {
          params.genre = genre;
          console.log('genre is ' + genre)
        } if (acValue == 33 || acValue == 66 || acValue == 100) {
          params.acousticness = acValue;
          console.log('ac is: ' + acValue)
        } if (dncValue == 33 || dncValue == 66 || dncValue == 100) {
          params.danceability = dncValue;
          console.log('dnc is: ' + dncValue)
        } if (enValue == 33 || enValue == 66 || enValue == 100) {
          params.energy = enValue;
          console.log('en is: ' + enValue)
        } if (instValue == 100) {
          params.instrumentals = instValue;
          console.log('inst is: ' + instValue)
        } if (ldValue == 33 || ldValue == 66 || ldValue == 100) {
          params.loudness = ldValue;
          console.log('ld is: ' + ldValue)
        } if (tpValue == 80 || tpValue == 160 || tpValue == 240) {
          params.tempo = tpValue;
          console.log('tp is: ' + tpValue)
        }


        const res = await axios.get('/api/tracks', {
          params
        }
        )
        setLoad(true);
        console.log('passed!')
        console.log('tracks have been set:' + res.data)
        setTracks(res.data);


        // console.log(tracks)
        timer = null;
      }, 2000);
    }


  }


  return (
    <>
      <Head>
        <title>botBot</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="#" />
      </Head>
      <Page>
        <NavBar />

        <Dashboard
          bg={themes[theme].contrast}>
          <MyText
            weight={500}
            text={`Welcome, ZoÃ«!`}
            size={`${titleSize}px`}
          />
          <MyText
            text='Genres'
            size={`${headerSize}px`}
          />

          <SbCont>
            <SbButton
              onClick={() => setGenre('country')}
              color={genre == 'country' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'country' ? themes[theme].white : themes[theme].grey}
              text='Country' />
            <SbButton
              onClick={() => setGenre('dance')}
              color={genre == 'dance' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'dance' ? themes[theme].white : themes[theme].grey}
              text='Dance' />
            <SbButton
              onClick={() => setGenre('hipHop')}
              color={genre == 'hipHop' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'hipHop' ? themes[theme].white : themes[theme].grey}
              text='Hip Hop' />
            <SbButton
              onClick={() => setGenre('house')}
              color={genre == 'house' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'house' ? themes[theme].white : themes[theme].grey}
              text='House' />
            <SbButton
              onClick={() => setGenre('indie')}
              color={genre == 'indie' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'indie' ? themes[theme].white : themes[theme].grey}
              text='Indie' />
            <SbButton
              onClick={() => setGenre('jazz')}
              color={genre == 'jazz' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'jazz' ? themes[theme].white : themes[theme].grey}
              text='Jazz' />
            <SbButton
              onClick={() => setGenre('kPop')}
              color={genre == 'kPop' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'kPop' ? themes[theme].white : themes[theme].grey}
              text='K-pop' />
            <SbButton
              onClick={() => setGenre('pop')}
              color={genre == 'pop' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'pop' ? themes[theme].white : themes[theme].grey}
              text='Pop' />
            <SbButton
              onClick={() => setGenre('metal')}
              color={genre == 'metal' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'metal' ? themes[theme].white : themes[theme].grey}
              text='Metal' />
            <SbButton
              onClick={() => setGenre('rb')}
              color={genre == 'rb' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'rb' ? themes[theme].white : themes[theme].grey}
              text='R&amp;B' />
            <SbButton
              onClick={() => setGenre('rap')}
              color={genre == 'rap' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'rap' ? themes[theme].white : themes[theme].grey}
              text='Rap' />
            <SbButton
              onClick={() => setGenre('raggae')}
              color={genre == 'raggae' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'raggae' ? themes[theme].white : themes[theme].grey}
              text='Raggae' />
            <SbButton
              onClick={() => setGenre('rock')}
              color={genre == 'rock' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'rock' ? themes[theme].white : themes[theme].grey}
              text='Rock' />
            <SbButton
              onClick={() => setGenre('trap')}
              color={genre == 'trap' ? themes[theme].sbSelect : themes[theme].altAccent}
              textCol={genre == 'trap' ? themes[theme].white : themes[theme].grey}
              text='Trap' />
          </SbCont>

          <MyText
            text='How do you feel?'
            size={`${headerSize}px`}
          />
          <SliderCont>
            <Slider text='Acounticness' value={acValue} onChange={(ev) => setAcValue(ev.target.value)} />
            <Slider text='Danceability' value={dncValue} onChange={(ev) => setDncValue(ev.target.value)} />

            <Slider text='Energy' value={enValue} onChange={(ev) => setEnValue(ev.target.value)} />
            <Slider text='Instrumentals' step={100} value={instValue} onChange={(ev) => setInstValue(ev.target.value)} />
            <Slider text='Loudness' value={ldValue} onChange={(ev) => setLdValue(ev.target.value)} />
            <Slider text='Tempo' max={240} step={80} value={tpValue} onChange={(ev) => setTpValue(ev.target.value)} />
           
          </SliderCont>
          <SpaceCont>
            <MyText
              text={load ? 'Generated Tracks:' : 'Tracks not yet generated'}
              size={`${headerSize}px`}
            />
            <MyButton
              onClick={inputFilter}
              text='generate' />
          </SpaceCont>

          <Divider color={themes[theme].text} />
          {/* <MyTrack /> */}
          <RegCont>
            <div style={{ height: '100%', overflow: 'scroll', position: 'responsive' }}>

              {tracks.map((o, i) => <MyTrack
                key={i}
                song={o.Title}
                artist={o.Artist}
                album={o.Album}
                time={((o.duration_ms / 1000) / 60).toFixed(2)}
              />)}
            </div>
          </RegCont>
        </Dashboard>


      </Page>
    </>
  )
}
